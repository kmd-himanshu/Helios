# this maintains properties required by the data access layer

initial.context=java:comp/env
jndi.data.source=jdbc/boomerdb

# The following are used only when the JDBC parms are not available through JNDI, eg testing
mysql.jdbc.data.source=jdbc:mysql://localhost:3306/boomerdb
dbuser=boomer
dbpswd=ssn!593

#
# Device Monitor
#
getDeviceMonitorIdByUniqueKeySQL=select id from boomerdb.DEVICEMONITOR where monitorname = ? and serialnumber = ? 
getDeviceMonitorPersistById=select persistmonitor from boomerdb.DEVICEMONITOR where id = ? 
proxyPulseFieldNames=input2A,input3A,input4A,input5A,input6A,input7A,input8A

#
# SEQUENCE
#
sequenceReservationAmount=20
sequenceReservationSQL=UPDATE boomerdb.SEQUENCE SET seq_count=seq_count + ? where seq_name = 'SEQ_GEN'
sequenceNextSQL=SELECT seq_count from boomerdb.SEQUENCE

#
# ACCESS AND ACCESS TYPE
#
selectAllAccessTypesSQL=select id, ACCESSNAME, ABBREVIATION from boomerdb.ACCESS_TYPE
selectAccessTypeByIDSQL=select id, ACCESSNAME, ABBREVIATION from boomerdb.ACCESS_TYPE where id=?
selectAccessByIdSQL=select id, ACCESS_TYPE_id, CREATE_ACCESS, READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS from boomerdb.ACCESS
insertAccessSQL=insert into boomerdb.ACCESS (id,ACCESS_TYPE_id,CREATE_ACCESS,READ_ACCESS,UPDATE_ACCESS,DELETE_ACCESS) values (?,?,?,?,?,?)
updateAccessSQL=update boomerdb.ACCESS set CREATE_ACCESS=?,READ_ACCESS=?,UPDATE_ACCESS=?,DELETE_ACCESS=? where id=?
deleteAccessSQL=delete from boomerdb.ACCESS where id=?

#
#  USER 
#
getUsersByRoleSQL=SELECT u.id,u.CLIENT_id,u.F_NAME,u.L_NAME,u.USERNAME,u.EMAIL_ADDR,u.PASSWORD,u.GLOBALADMIN,u.CLIENT_ADMIN,u.EXPIRE from boomerdb.USER_ROLE r, boomerdb.PE_USER u where r.PE_ROLE_id = ? and u.id = r.PE_USER.id
getUserByColumnSQL=SELECT id,CLIENT_id,F_NAME,L_NAME,USERNAME,EMAIL_ADDR,PASSWORD,GLOBALADMIN,CLIENT_ADMIN,EXPIRE from boomerdb.PE_USER where
insertPEUserSQL=insert into boomerdb.PE_USER (id,F_NAME,L_NAME,USERNAME,EMAIL_ADDR,PASSWORD,GLOBALADMIN,CLIENT_ADMIN,EXPIRE) values (?,?,?,?,?,?,?,?,?)
deletePEUserWithIdSQL=delete from boomerdb.PE_USER where id = ?
updatePEUserSQL=UPDATE boomerdb.PE_USER SET F_NAME=?,L_NAME=?,USERNAME=?,EMAIL_ADDR=?,PASSWORD=?,GLOBALADMIN=?,CLIENT_ADMIN=?,EXPIRE=?

#
# USER ACTION
#
insertUserActionInsert1SQL=insert into boomerdb.USER_ACTION(ACTIONNAME,PE_USER_id) values('EDIT',?)
insertUserActionInsert2SQL=insert into boomerdb.USER_ACTION(ACTIONNAME,PE_USER_id) values('VIEW',?)
insertUserActionInsert3SQL=insert into boomerdb.USER_ACTION(ACTIONNAME,PE_USER_id) values('REMOVE',?)
insertUserActionInsert4SQL=insert into boomerdb.USER_ACTION(ACTIONNAME,PE_USER_id) values('SEND PASSWORD',?)


#
#  USER LOCATION
#
getUserLocationByUserSQL=select id,LOCATION_id,PE_USER_id from boomerdb.USER_LOCATION where PE_USER_id = ?
deleteUserLocationsByUserSQL=delete from boomerdb.USER_LOCATION where PE_USER_id = ?
insertUserLocationSQL=insert into boomerdb.USER_LOCATION (id,LOCATION_id,PE_USER_id) values (?,?,?)

#
#  ROLE
#
selectAllRolesSQL=SELECT id,ROLENAME,ABBREVIATION,CLIENT_Id FROM boomerdb.PE_ROLE
selectRolesByClientIdSQL=SELECT id,ROLENAME,ABBREVIATION,CLIENT_Id FROM boomerdb.PE_ROLE where CLIENT_Id = ?
selectRoleByIdSQL=SELECT id,ROLENAME,ABBREVIATION,CLIENT_Id FROM boomerdb.PE_ROLE where Id = ?
deleteRoleWithIdSQL=delete from boomerdb.PE_ROLE where id = ?
insertRoleSQL=insert into boomerdb.PE_ROLE (id,ROLENAME,ABBREVIATION,CLIENT_Id) values (?,?,?,?)
updateRoleSQL=update boomerdb.PE_ROLE set ROLENAME=?,ABBREVIATION=?,CLIENT_Id=? where id=?

#
#  ROLE ACCESS
#
selectAccessListByRoleSQL=select a.id, a.ACCESS_TYPE_id, a.CREATE_ACCESS, a.READ_ACCESS, a.UPDATE_ACCESS, a.DELETE_ACCESS from boomerdb.ROLE_ACCESS r,boomerdb.ACCESS a where r.ROLE_id=? and a.id = r.ACCESS.id
insertAccessForRoleSQL=insert into boomerdb.ACCESS_TYPE (id,PE_ROLE_id,ACCESS_id) values (?,?,?)
deleteAccessListFromRoleSQL=delete from boomerdb.ROLE_ACCESS where PE_ROLE_id = ?

#
#  USER ROLE 
#
selectRolesByUserSQL=select r.id,r.ROLENAME,r.ABBREVIATION,r.CLIENT_Id from boomerdb.USER_ROLE u, boomerdb.PE_ROLE r where u.PE_USER_id=? and r.id = u.PE_ROLE_id
insertRolesForUserSQL=insert into boomerdb.USER_ROLE (id,PE_ROLE_id,PE_USER_id) values (?,?,?)
deleteRolesFromUserSQL=delete from boomerdb.USER_ROLE where PE_USER_id = ?
deleteUserRolesFromRoleSQL=delete from boomerdb.USER_ROLE where PE_ROLE_id = ?

#
#  CLIENT
#
selectAllClientsSQL=SELECT id, CLIENTNAME, ABBREVIATION FROM boomerdb.CLIENT
selectClientByIdSQL=SELECT id, CLIENTNAME, ABBREVIATION FROM boomerdb.CLIENT where id = ?

#
#  DIVISION
#
selectDivisionsByClientIdSQL=SELECT id, DIVISIONNAME, ABBREVIATION, CLIENT_id FROM boomerdb.DIVISION where CLIENT_id = ?

# Preemptive checking for duplicates can be turned on and off with the following switch
checkDuplicatePacketsSwitch=true


insertDevicePacketSQL=insert into boomerdb.DEVICEPACKET values (?, ?, 1, ?)
insertPacketCommonSQL=insert into boomerdb.PACKETCOMMON values (?, ?, ?, ?, 1, ?)
insertDeviceKVPSQL=insert into boomerdb.DEVICEKVP values (?, ?, 1, ?, ?)

getDeviceMonitorByIdSQL=  \
SELECT                    \
  id,                     \
  MONITORNAME,            \
  MONITORNOTES,           \
  PERSISTMONITOR,         \
  SERIALNUMBER,           \
  version,                \
  DEVICEMODEL_id,         \
  PULSECONSTANT,          \
  MONITORTYPE_id          \
FROM                      \
  boomerdb.DEVICEMONITOR  \
WHERE                     \
  id = ?

getDeviceFieldsByMonitorIdSQL=         \
SELECT                                 \
  field.id,                            \
  field.devicefieldname,               \
  field.devicefieldorder,              \
  field.devicefieldtype,               \
  field.version,                       \
  field.persistfield,                  \
  field.devicemodel_id                 \
FROM                                   \
  boomerdb.DEVICEMONITOR monitor,      \
  boomerdb.DEVICEMODEL model,          \
  boomerdb.DEVICEFIELD field           \
WHERE                                  \
     monitor.id = ?                    \
and  model.id = monitor.devicemodel_id \
and  field.devicemodel_id = model.id   \
order by 2

isPacketDuplicateSQL               \
select  dm.serialnumber            \
from    boomerdb.DEVICEPACKET dp,  \
        boomerdb.DEVICEMONITOR dm  \
where   dp.packetdt = ?            \
and     dp.devicemonitor_id = ?    \
and     dm.id = devicemonitor_id


getMaxPacketForMonitorSQL			\
SELECT	P.id, 						\
		max(P.PACKETDT), 			\
		P.version, 					\
		DEVICEMONITOR_id 			\
FROM 	DEVICEPACKET P				\
WHERE 	P.DEVICEMONITOR_id = ? 

getNextPacketForMonitorAndDateSQL	\
SELECT	P.id, 						\
		P.PACKETDT, 				\
		P.version, 					\
		DEVICEMONITOR_id 			\
FROM 	DEVICEPACKET P				\
WHERE 	P.DEVICEMONITOR_id = ? 		\
AND   	P.PACKETDT >= ?				\
ORDER BY P.PACKETDT					\
LIMIT 1

getPriorPacketForMonitorAndDateSQL	\
SELECT	P.id,						\
		P.PACKETDT,					\
		P.version, 					\
		DEVICEMONITOR_id 			\
FROM 	DEVICEPACKET P				\
WHERE 	P.DEVICEMONITOR_id = ?		\
AND   	P.PACKETDT <= ?				\
ORDER BY P.PACKETDT					\
LIMIT 1

getPacketsForMonitorInRangeSQL		\
SELECT	P.id,						\
		P.PACKETDT,					\
		P.version, 					\
		DEVICEMONITOR_id 			\
FROM 	DEVICEPACKET P				\
WHERE 	P.DEVICEMONITOR_id = ?		\
AND   	P.PACKETDT >= ?				\
AND   	P.PACKETDT < ?				\
ORDER BY P.PACKETDT

getPacketsForMonitorsInRangeSQL		\
SELECT	P.id,						\
		P.PACKETDT,					\
		P.version, 					\
		DEVICEMONITOR_id 			\
FROM 	DEVICEPACKET P				\
WHERE 	P.DEVICEMONITOR_id in (REPLACE)	\
AND   	P.PACKETDT >= ?				\
AND   	P.PACKETDT < ?				\
ORDER BY P.PACKETDT

getPacketValuesSQL					\
SELECT	F.DEVICEFIELDNAME,			\
  		K.FIELDVALUE,				\
  		F.DEVICEFIELDTYPE,			\
  		F.version					\
FROM  DEVICEFIELD F, 				\
      DEVICEKVP K					\
WHERE K.DEVICEPACKET_id = ? 		\
AND F.ID =  K.DEVICEFIELD_id		\
ORDER by F.DEVICEFIELDORDER

getMonitorByIdSQL	 				\
SELECT	  id,                     \
		  MONITORNAME,            \
		  MONITORNOTES,           \
		  PERSISTMONITOR,         \
		  SERIALNUMBER,           \
		  version,                \
		  DEVICEMODEL_id,         \
		  PULSECONSTANT,          \
		  MONITORTYPE_id          \
FROM 	  DEVICEMONITOR			  \
where 	  id = ?

getCostFactorsSQL					\
SELECT 	CASESHANDLED, 				\
		COSTPERKWH 					\
FROM 	COSTFACTORS 				\
where 	BUILDINGALLOCATION_id = ?

getMonitorIdForProxyIdSQL	        \
SELECT	a.ASSOCKEY_id				\
FROM 	MONITORASSOC a				\
where 	a.ASSOCLEVEL = 'DEVICEMONITOR'	\
and     a.DEVICEMONITOR_id = ?

getMonitorIdsByAllocationIdSQL		\
SELECT	a.DEVICEMONITOR_id			\
FROM 	MONITORASSOC a				\
where 	a.ASSOCLEVEL = 'BUILDINGALLOCATION'	\
and     a.ASSOCKEY_id = ?


getMonitorIdsByBuildingIdSQL	 	\
SELECT	a.DEVICEMONITOR_id			\
FROM 	MONITORASSOC a				\
where 	a.ASSOCLEVEL = 'BUILDING'	\
and     a.ASSOCKEY_id = ?

getMonitorIdsByLocationIdSQL	 	\
SELECT	a.DEVICEMONITOR_id			\
FROM 	MONITORASSOC a				\
where 	a.ASSOCLEVEL = 'LOCATION'	\
and     a.ASSOCKEY_id = ?


getMonitorIdsByDivisionIdSQL	    \
SELECT	a.DEVICEMONITOR_id			\
FROM 	MONITORASSOC a				\
where 	a.ASSOCLEVEL = 'DIVISION'	\
and     a.ASSOCKEY_id = ?


getParentHierarchyFromAllocationIdSQL \
SELECT	a.id,						\
        b.id,						\
        l.id,						\
        d.id						\
FROM 	BUILDINGALLOCATION a,		\
        BUILDING b,				  	\
        LOCATION l,                 \
        DIVISION d                  \
where 	a.id = ?                    \
and     b.id = a.building_id		\
and     l.id = b.location_id        \
and     d.id = l.division_id

getParentHierarchyFromBuildingIdSQL	\
SELECT	0,                          \
		b.id,						\
        l.id,						\
        d.id						\
FROM 	BUILDING b,				  	\
        LOCATION l,                 \
        DIVISION d                  \
where 	b.id = ?             		\
and     l.id = b.location_id        \
and     d.id = l.division_id

getParentHierarchyFromLocationIdSQL	\
SELECT	0,						    \
        0,	                        \
        l.id,						\
        d.id						\
FROM 	LOCATION l,                 \
        DIVISION d                  \
where 	l.id = ?                    \
and     d.id = l.division_id

getParentHierarchyFromDivisionIdSQL	\
SELECT	0,                          \
		0,	                        \
        0,   						\
        d.id						\
FROM 	DIVISION d                  \
where 	d.id = ?

getAllocationIdsFromBuildingIdSQL	\
SELECT	id							\
FROM 	BUILDINGALLOCATION			\
where 	BUILDING_id = ?

getBuildingIdsFromLocationIdSQL		\
SELECT	id							\
FROM 	BUILDING					\
where 	LOCATION_id = ?

getLocationIdsFromDivisionIdSQL		\
SELECT	id							\
FROM 	LOCATION					\
where 	DIVISION_id = ?


getModelForMonitorSQL 				\
select	MD.DEVICEUSE,				\
  		MD.MODELNAME,				\
  		MD.version,					\
  		MD.UTILITYGRADE				\
FROM  	DEVICEMONITOR MT,			\
      	DEVICEMODEL MD				\
WHERE 	MT.id = ?					\
AND   	MD.id = MT.DEVICEMODEL_id 


getMetricForLocationPeriodSQL		\
select METRICVALUE 					\
from BOOMERMETRIC 					\
where period_id = 					\
  (									\
    select  id 						\
    from    PERIOD 					\
    where   STARTDT >= ?			\
    and     PERIODTYPE_id = 		\
      (								\
        select  id 					\
        from    BOOMERTYPE			\
        where   FIELDNAME = 'SAFEWAY' 	\
        and     FIELDVALUE = 'PERIOD'	\
      )								\
  )									\
and METRICTYPE = 					\
  (									\
    select  id 						\
    from    BOOMERTYPE				\
    where   FIELDNAME = 'SAFEWAY'	\
    and     FIELDVALUE = ?			\
  )									\
and LOCATION_id = ?					\
LIMIT 1
  	
getPercentageSqftSQL				\
select PERCENTAGELOCSQFT 			\
from boomerdb.BUILDING 				\
where id = ?

getBuildingSQL       			  \
SELECT                            \
  id,                             \
  BUILDINGNAME,                   \
  SQFT,                           \
  ESTIMATE,                       \
  PERCENTAGELOCSQFT,              \
  ENERGY,                         \
  BUILDINGTYPE_id                 \
FROM boomerdb.BUILDING            \
where id = ?

getBuildingsFromLocationSQL       \
SELECT                            \
  id,                             \
  BUILDINGNAME,                   \
  SQFT,                           \
  ESTIMATE,                       \
  PERCENTAGELOCSQFT,              \
  ENERGY,                         \
  BUILDINGTYPE_id                 \
FROM boomerdb.BUILDING            \
where LOCATION_id = ?

getLocationFromIdSQL          \
SELECT                        \
  id,                         \
  LOCATIONNAME,               \
  SQFT,                       \
  ESTIMATE,                   \
  ENERGY,                     \
  GEOLOCATION_id,             \
  DIVISION_id                 \
FROM boomerdb.LOCATION        \
where id = ?

getLocationsByDivisionIdSQL   \
SELECT                        \
  id,                         \
  LOCATIONNAME,               \
  SQFT,                       \
  ESTIMATE,                   \
  ENERGY,                     \
  GEOLOCATION_id,             \
  DIVISION_id                 \
FROM boomerdb.LOCATION        \
where DIVISION_id = ?

getMetricsForBuildingSQL      \
select                        \
   m.METRICVALUE,             \
   t.FIELDVALUE,              \
   p.STARTDT,                 \
   p.ENDDT,                   \
   p.PERIODNAME,              \
   p.id                       \
from                          \
   BOOMERMETRIC m,            \
   BOOMERTYPE t,              \
   PERIOD p                   \
where                         \
     m.BUILDING_id = ?        \
and  t.id = m.METRICTYPE      \
and  p.id = m.period_id
   
getMetricsForLocationSQL      \
select                        \
   m.METRICVALUE,             \
   t.FIELDVALUE,              \
   p.STARTDT,                 \
   p.ENDDT,                   \
   p.PERIODNAME,              \
   p.id                       \
from                          \
   BOOMERMETRIC m,            \
   BOOMERTYPE t,              \
   PERIOD p                   \
where                         \
     m.LOCATION_id = ?        \
and  t.id = m.METRICTYPE      \
and  p.id = m.period_id

